-- Catppuccin
require("catppuccin").setup({
  no_italic = false,
  no_bold = true,
  no_underline = false,
  transparent_background = true, -- Keeping transparency to match Alacritty
  styles = {
    comments = { "italic" },
    conditionals = {},
    loops = {},
    functions = {},
    keywords = {},
    strings = {},
    variables = {},
    numbers = {},
    booleans = {},
    properties = {},
    types = { "italic" },
    operators = {},
  },
  color_overrides = {
    mocha = {
      bg = "#010101",         -- Matches Alacritty's darker background
      foreground = "#cdd6f4",
      black = "#0a0a0a",
      zinc = "#7F8CAA",
      apple = "#c83434",
      rosewater = "#ea6962",
      flamingo = "#ea6962",
      red = "#f38ba8",
      maroon = "#ea6962",
      pink = "#d3869b",
      mauve = "#d3869b",
      peach = "#e78a4e",
      yellow = "#f9e2af",
      green = "#a6e3a1",
      emerald = "#98a5a4",
      teal = "#89b482",
      sky = "#5E8CAB",
      sapphire = "#89b482",
      blue = "#89b4fa",
      magenta = "#cba6f7",
      cyan = "#94e2d5",
      lavender = "#7daea3",
      text = "#ebdbb2",
      subtext1 = "#d5c4a1",
      subtext0 = "#bdae93",
      overlay2 = "#4d4d4d",
      overlay1 = "#404040",
      overlay0 = "#2d2e2f",
      surface2 = "#2a2a2a",
      surface1 = "#212121",
      surface0 = "#1c1c1c",
      base = "#0f0f0f",       -- Adjusted to be slightly lighter than bg for contrast
      mantle = "#0a0a0a",
      crust = "#080808",
    },
  },
  highlight_overrides = {
    all = function(colors)
      local O = require("catppuccin").options
      local active_bg = O.transparent_background and colors.none or colors.base
      local inactive_bg = O.transparent_background and colors.none or colors.crust
      return {
        CmpItemMenu = { fg = colors.surface2 },
        CursorLineNr = { fg = colors.text },
        FloatBorder = { bg = active_bg, fg = colors.subtext0 },
        Visual = { bg = colors.surface0 },
        VisualNOS = { bg = colors.surface0 },
        LineNr = { fg = colors.overlay0 },
        LspInfoBorder = { link = "FloatBorder" },
        NvimTreeDirectoryIcon = { fg = colors.zinc },
        NvimTreeDirectoryName = { fg = colors.zinc },
        NvimTreeGitConflict = { fg = colors.red },
        NvimTreeGitDeleted = { fg = colors.red },
        NvimTreeGitIgnored = { fg = colors.overlay0 },
        NvimTreeGitModified = { fg = colors.sky },
        NvimTreeGitStaged = { fg = colors.emerald },
        NvimTreeGitUnstaged = { fg = colors.red },
        NvimTreeGitUntracked = { fg = colors.emerald },
        NvimTreeIndent = { fg = colors.surface1 },
        NvimTreeNormal = { bg = colors.black },
        NvimTreeNormalNC = { bg = colors.black },
        NvimTreeRootFolder = { fg = colors.zinc, style = { "bold" } },
        NvimTreeTabActive = { fg = colors.text, bg = active_bg },
        NvimTreeTabInactive = { fg = colors.surface2, bg = inactive_bg },
        NvimTreeTabSeparatorActive = { fg = colors.mantle, bg = active_bg },
        NvimTreeTabSeparatorInactive = { fg = colors.crust, bg = inactive_bg },
        NvimTreeWinSeparator = { fg = colors.base, bg = active_bg },
        NormalFloat = { bg = active_bg },
        Pmenu = { bg = active_bg, fg = colors.subtext1 },
        PmenuSel = { bg = colors.surface0, fg = colors.subtext0 },
        VertSplit = { bg = colors.black, fg = colors.surface0 },
        YankHighlight = { bg = colors.surface2 },
        FidgetTask = { fg = colors.subtext2 },
        FidgetTitle = { fg = colors.peach },

        IblIndent = { fg = colors.surface0 },
        IblScope = { fg = colors.overlay0 },

        Boolean = { fg = colors.mauve },
        Number = { fg = colors.mauve },
        Float = { fg = colors.mauve },

        PreProc = { fg = colors.mauve },
        PreCondit = { fg = colors.mauve },
        Include = { fg = colors.mauve },
        Define = { fg = colors.mauve },
        Conditional = { fg = colors.red },
        Repeat = { fg = colors.red },
        Keyword = { fg = colors.zinc, italic = true },
        Typedef = { fg = colors.red },
        Exception = { fg = colors.red },
        Statement = { fg = colors.red },

        Error = { fg = colors.red },
        StorageClass = { fg = colors.peach },
        Tag = { fg = colors.peach },
        Label = { fg = colors.peach },
        Structure = { fg = colors.peach },
        Comment = { fg = colors.overlay0 },
        TermCursor = { bg = colors.subtext1 },
        MatchParen = { fg = colors.sky },
        Operator = { fg = colors.sky },
        Title = { fg = colors.peach },
        Special = { fg = colors.yellow },
        SpecialChar = { fg = colors.yellow },
        Type = { fg = colors.yellow, },
        Function = { fg = colors.mauve, },
        Delimiter = { fg = colors.subtext2 },
        Ignore = { fg = colors.subtext2 },
        Macro = { fg = colors.teal },

        TSAnnotation = { fg = colors.mauve },
        TSAttribute = { fg = colors.mauve },
        TSBoolean = { fg = colors.mauve },
        TSCharacter = { fg = colors.teal },
        TSCharacterSpecial = { link = "SpecialChar" },
        TSComment = { link = "Comment" },
        TSConditional = { fg = colors.sky },
        TSConstBuiltin = { fg = colors.mauve },
        TSConstMacro = { fg = colors.mauve },
        TSConstant = { fg = colors.text },
        TSConstructor = { fg = colors.green },
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        TSEnvironment = { link = "Macro" },
        TSEnvironmentName = { link = "Type" },
        TSError = { link = "Error" },
        TSException = { fg = colors.red },
        TSField = { fg = colors.blue },
        TSFloat = { fg = colors.mauve },
        TSFuncBuiltin = { fg = colors.mauve },
        TSFuncMacro = { fg = colors.surface1 },
        TSFunction = { fg = colors.mauve },
        TSFunctionCall = { fg = colors.mauve },
        TSInclude = { fg = colors.zinc },
        TSKeyword = { fg = colors.zinc },
        TSKeywordFunction = { fg = colors.zinc },
        TSKeywordOperator = { fg = colors.peach },
        TSKeywordReturn = { fg = colors.zinc },
        TSLabel = { fg = colors.peach },
        TSLiteral = { link = "String" },
        TSMath = { fg = colors.blue },
        TSMethod = { fg = colors.green },
        TSMethodCall = { fg = colors.green },
        TSNamespace = { fg = colors.yellow },
        TSNone = { fg = colors.text },
        TSNumber = { fg = colors.mauve },
        TSOperator = { fg = colors.sky },
        TSParameter = { fg = colors.text },
        TSParameterReference = { fg = colors.text },
        TSPreProc = { link = "PreProc" },
        TSProperty = { fg = colors.blue },
        TSPunctBracket = { fg = colors.text },
        TSPunctDelimiter = { link = "Delimiter" },
        TSPunctSpecial = { fg = colors.blue },
        TSRepeat = { fg = colors.red },
        TSStorageClass = { fg = colors.peach },
        TSStorageClassLifetime = { fg = colors.peach },
        TSStrike = { fg = colors.subtext2 },
        TSString = { fg = colors.teal },
        TSStringEscape = { fg = colors.green },
        TSStringRegex = { fg = colors.green },
        TSStringSpecial = { link = "SpecialChar" },
        TSSymbol = { fg = colors.text },
        TSTag = { fg = colors.peach },
        TSTagAttribute = { fg = colors.green },
        TSTagDelimiter = { fg = colors.green },
        TSText = { fg = colors.green },
        TSTextReference = { link = "Constant" },
        TSTitle = { link = "Title" },
        TSTodo = { link = "Todo" },
        TSType = { fg = colors.yellow, },
        TSTypeBuiltin = { fg = colors.yellow, },
        TSTypeDefinition = { fg = colors.yellow, },
        TSTypeQualifier = { fg = colors.peach, },
        TSURI = { fg = colors.blue },
        TSVariable = { fg = colors.text },
        TSVariableBuiltin = { fg = colors.mauve },

        ["@annotation"] = { link = "TSAnnotation" },
        ["@attribute"] = { link = "TSAttribute" },
        ["@boolean"] = { link = "TSBoolean" },
        ["@character"] = { link = "TSCharacter" },
        ["@character.special"] = { link = "TSCharacterSpecial" },
        ["@comment"] = { link = "TSComment" },
        ["@conceal"] = { link = "Grey" },
        ["@conditional"] = { link = "TSConditional" },
        ["@constant"] = { link = "TSConstant" },
        ["@constant.builtin"] = { link = "TSConstBuiltin" },
        ["@constant.macro"] = { link = "TSConstMacro" },
        ["@constructor"] = { link = "TSConstructor" },
        ["@debug"] = { link = "TSDebug" },
        ["@define"] = { link = "TSDefine" },
        ["@error"] = { link = "TSError" },
        ["@exception"] = { link = "TSException" },
        ["@field"] = { link = "TSField" },
        ["@float"] = { link = "TSFloat" },
        ["@function"] = { link = "TSFunction" },
        ["@function.builtin"] = { link = "TSFuncBuiltin" },
        ["@function.call"] = { link = "TSFunctionCall" },
        ["@function.macro"] = { link = "TSFuncMacro" },
        ["@include"] = { link = "TSInclude" },
        ["@keyword"] = { link = "TSKeyword" },
        ["@keyword.function"] = { link = "TSKeywordFunction" },
        ["@keyword.operator"] = { link = "TSKeywordOperator" },
        ["@keyword.return"] = { link = "TSKeywordReturn" },
        ["@label"] = { link = "TSLabel" },
        ["@math"] = { link = "TSMath" },
        ["@method"] = { link = "TSMethod" },
        ["@method.call"] = { link = "TSMethodCall" },
        ["@namespace"] = { link = "TSNamespace" },
        ["@none"] = { link = "TSNone" },
        ["@number"] = { link = "TSNumber" },
        ["@operator"] = { link = "TSOperator" },
        ["@parameter"] = { link = "TSParameter" },
        ["@parameter.reference"] = { link = "TSParameterReference" },
        ["@preproc"] = { link = "TSPreProc" },
        ["@property"] = { link = "TSProperty" },
        ["@punctuation.bracket"] = { link = "TSPunctBracket" },
        ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
        ["@punctuation.special"] = { link = "TSPunctSpecial" },
        ["@repeat"] = { link = "TSRepeat" },
        ["@storageclass"] = { link = "TSStorageClass" },
        ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
        ["@strike"] = { link = "TSStrike" },
        ["@string"] = { link = "TSString" },
        ["@string.escape"] = { link = "TSStringEscape" },
        ["@string.regex"] = { link = "TSStringRegex" },
        ["@string.special"] = { link = "TSStringSpecial" },
        ["@symbol"] = { link = "TSSymbol" },
        ["@tag"] = { link = "TSTag" },
        ["@tag.attribute"] = { link = "TSTagAttribute" },
        ["@tag.delimiter"] = { link = "TSTagDelimiter" },
        ["@text"] = { link = "TSText" },
        ["@text.danger"] = { link = "TSDanger" },
        ["@text.diff.add"] = { link = "diffAdded" },
        ["@text.diff.delete"] = { link = "diffRemoved" },
        ["@text.emphasis"] = { link = "TSEmphasis" },
        ["@text.environment"] = { link = "TSEnvironment" },
        ["@text.environment.name"] = { link = "TSEnvironmentName" },
        ["@text.literal"] = { link = "TSLiteral" },
        ["@text.math"] = { link = "TSMath" },
        ["@text.note"] = { link = "TSNote" },
        ["@text.reference"] = { link = "TSTextReference" },
        ["@text.strike"] = { link = "TSStrike" },
        ["@text.strong"] = { link = "TSStrong" },
        ["@text.title"] = { link = "TSTitle" },
        ["@text.todo"] = { link = "TSTodo" },
        ["@text.todo.checked"] = { link = "Green" },
        ["@text.todo.unchecked"] = { link = "Ignore" },
        ["@text.underline"] = { link = "TSUnderline" },
        ["@text.uri"] = { link = "TSURI" },
        ["@text.warning"] = { link = "TSWarning" },
        ["@todo"] = { link = "TSTodo" },
        ["@type"] = { link = "TSType" },
        ["@type.builtin"] = { link = "TSTypeBuiltin" },
        ["@type.definition"] = { link = "TSTypeDefinition" },
        ["@type.qualifier"] = { link = "TSTypeQualifier" },
        ["@uri"] = { link = "TSURI" },
        ["@variable"] = { link = "TSVariable" },
        ["@variable.builtin"] = { link = "TSVariableBuiltin" },

        ["@lsp.type.class"] = { link = "TSType" },
        ["@lsp.type.comment"] = { link = "TSComment" },
        ["@lsp.type.decorator"] = { link = "TSFunction" },
        ["@lsp.type.enum"] = { link = "TSType" },
        ["@lsp.type.enumMember"] = { link = "TSProperty" },
        ["@lsp.type.events"] = { link = "TSLabel" },
        ["@lsp.type.function"] = { link = "TSFunction" },
        ["@lsp.type.interface"] = { link = "TSType" },
        ["@lsp.type.keyword"] = { link = "TSKeyword" },
        ["@lsp.type.macro"] = { link = "TSConstMacro" },
        ["@lsp.type.method"] = { link = "TSMethod" },
        ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
        ["@lsp.type.namespace"] = { link = "TSNamespace" },
        ["@lsp.type.number"] = { link = "TSNumber" },
        ["@lsp.type.operator"] = { link = "TSOperator" },
        ["@lsp.type.parameter"] = { link = "TSParameter" },
        ["@lsp.type.property"] = { link = "TSProperty" },
        ["@lsp.type.regexp"] = { link = "TSStringRegex" },
        ["@lsp.type.string"] = { link = "TSString" },
        ["@lsp.type.struct"] = { link = "TSType" },
        ["@lsp.type.type"] = { link = "TSType" },
        ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
        ["@lsp.type.variable"] = { link = "TSVariable" }
      }
    end,
  },
  integrations = {
    gitsigns = true,
    treesitter = true,
    mason = true,
    neotree = {
      enabled = true,
      transparent_background = true,
    },
    indent_blankline = {
      enabled = true,
      scope_color = "",
      colored_indent_levels = false,
    },
    native_lsp = {
      enabled = true,
      underlines = {
        errors = { "underline" },
        hints = { "underline" },
        warnings = { "underline" },
        information = { "underline" },
        ok = { "underline" },
      },
      inlay_hints = {
        transparent_background = true,
      },
    },
  },
})

vim.cmd.colorscheme "catppuccin"
